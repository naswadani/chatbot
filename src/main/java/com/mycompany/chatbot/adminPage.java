/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.chatbot;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

/**
 *
 * @author Naswa Khansa
 */
public class adminPage extends javax.swing.JFrame {
    koneksiDB kon = new koneksiDB("localhost","root","","chatbot"); 
    private boolean isEditing = false;
    private boolean isDelete = false;
    private boolean isSearch = false;
    ResultSet rscmd,user,RsLog;
    Statement stm,stm2;
    Connection con;
    int idCommand,IDUser;
    private Object[][] dataTable = null; 
    private Object[][] dataTableUser = null;
    private String[] header = {"Command","Response"};
    
    private String[] headerUser = {"ID","Username"};
    public adminPage() throws TelegramApiException, TelegramApiException, TelegramApiException {
        initComponents();
        regis();
        open_db();
        baca_data();
        baca_data_user();
        baca_history();
        startDataUpdateTimer();
        setButton();
    }
    private void offfield(){
        commandField.setEnabled(false);
        responseField.setEnabled(false);
    }
    private void fieldblank(){
        commandField.setText("");
        responseField.setText("");
    }
    private void onStartCancel(){
        start.setEnabled(true);
        cancel.setEnabled(true);
    }
    private void setButton(){
        start.setEnabled(false);
        commandField.setEnabled(false);
        responseField.setEnabled(false);
        cancel.setEnabled(false);
    }
    private void regis(){
        try {
            TelegramBotsApi botAPI = new TelegramBotsApi(DefaultBotSession.class);
            Chatbot bot = new Chatbot();
            botAPI.registerBot(bot);
        } catch (TelegramApiException ex) {
            Logger.getLogger(adminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void open_db() { 
        try{ 
            con = kon.getConnection(); 
        //System.out.println("Berhasil "); 
        }catch (Exception e) { 
            System.out.println("Error : "+e); 
        } 
    } 
    /**
     * Creates new form adminPage
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandField = new javax.swing.JTextField();
        responseField = new javax.swing.JTextField();
        start = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        addCommand = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelrespon = new javax.swing.JTable();
        update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelUser = new javax.swing.JTable();
        SendBroadcast = new javax.swing.JButton();
        BroadcastField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListPesan = new javax.swing.JList<>();
        searchField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start.setText("Save");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        addCommand.setText("Add Command");
        addCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommandActionPerformed(evt);
            }
        });

        tabelrespon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Command", "Response"
            }
        ));
        tabelrespon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelresponMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelrespon);

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        Delete.setForeground(new java.awt.Color(255, 51, 51));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        tabelUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "Username"
            }
        ));
        tabelUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelUserMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelUser);

        SendBroadcast.setText("Send Broadcast");
        SendBroadcast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendBroadcastActionPerformed(evt);
            }
        });

        jLabel1.setText("Command");

        jLabel2.setText("Response");

        jLabel3.setText("Broadcast");

        jLabel4.setText("DAFTAR COMMAND DAN RESPON");

        jLabel5.setText("DAFTAR MEMBER");

        ListPesan.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(ListPesan);

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        jLabel6.setText("Search");

        jLabel7.setText("Log Chat");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(SendBroadcast)
                            .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(BroadcastField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(345, 345, 345)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(303, 303, 303))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(start)
                                    .addGap(18, 18, 18)
                                    .addComponent(cancel))
                                .addComponent(responseField)
                                .addComponent(commandField))
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(addCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(responseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(start)
                                    .addComponent(cancel))
                                .addGap(18, 18, 18)
                                .addComponent(addCommand)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(update))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(Delete)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BroadcastField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SendBroadcast))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addGap(193, 193, 193)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        String command = "/" + commandField.getText();
        String response = responseField.getText();
        if (response.isEmpty()) {
            JOptionPane.showMessageDialog(adminPage.this, "Response tidak boleh kosong",
                    "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(!isEditing){
            if (!isCommandExists(con, command)) {
                kon.insertCommand(command, response);
                JOptionPane.showMessageDialog(adminPage.this, "Command berhasil dimasukkan ke database",
                        "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(adminPage.this, "Command sudah ada dalam database",
                        "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }else{
             kon.updateCommand(this.idCommand,command, response);
             JOptionPane.showMessageDialog(adminPage.this, "Command berhasil diperbarui",
                "Sukses", JOptionPane.INFORMATION_MESSAGE);
             isEditing = false;
        }
        
        start.setEnabled(false);
        cancel.setEnabled(false);
        fieldblank();
        addCommand.setEnabled(true);
        update.setEnabled(true);
        Delete.setEnabled(true);
    }//GEN-LAST:event_startActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        fieldblank();
        cancel.setEnabled(false);
        start.setEnabled(false);
        offfield();
        update.setEnabled(true);
        addCommand.setEnabled(true);
        Delete.setEnabled(true);
        isEditing = false;
        isDelete = false;
    }//GEN-LAST:event_cancelActionPerformed

    private void addCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommandActionPerformed
        commandField.setEnabled(true);
        responseField.setEnabled(true);
        start.setEnabled(true);
        cancel.setEnabled(true);
        addCommand.setEnabled(false);
        update.setEnabled(false);
        Delete.setEnabled(false);
    }//GEN-LAST:event_addCommandActionPerformed

    private void tabelresponMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelresponMouseClicked
        if(isEditing == true || isDelete == true){
            int selectedRow = tabelrespon.getSelectedRow();
            String selectedCommand = (String) tabelrespon.getValueAt(selectedRow, 0);
            String selectedResponse = (String) tabelrespon.getValueAt(selectedRow, 1);
            commandField.setText(selectedCommand);
            responseField.setText(selectedResponse);

            String command = commandField.getText();
            String sql = "SELECT id FROM cmdres WHERE command=?";
            try (PreparedStatement statement = con.prepareStatement(sql)) {
                statement.setString(1, command); 
                ResultSet resultSet = statement.executeQuery(); 
                if (resultSet.next()) {
                    idCommand = resultSet.getInt("id");
            }
            } catch (SQLException ex) {
                Logger.getLogger(adminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(isDelete == true){
                int result = JOptionPane.showConfirmDialog(adminPage.this, "Apakah Anda yakin ingin menghapus data?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    if (isCommandExists(con, command)){
                        kon.deleteCommand(idCommand);
                        JOptionPane.showMessageDialog(adminPage.this, "Command Berhasil Dihapus",
                                "Sukses", JOptionPane.INFORMATION_MESSAGE);
                        fieldblank();
                        Delete.setEnabled(true);
                        offfield();
                    }
                } else {
                    adminPage.this.dispose();
                }
            }
        }
    }//GEN-LAST:event_tabelresponMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        isEditing = true;
        Delete.setEnabled(false);
        addCommand.setEnabled(false);
        update.setEnabled(false);
        onStartCancel();
        commandField.setEnabled(true);
        responseField.setEnabled(true);
    }//GEN-LAST:event_updateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        fieldblank();
        cancel.setEnabled(true);
        isDelete = true;
        Delete.setEnabled(false);
        addCommand.setEnabled(false);
        update.setEnabled(false);
    }//GEN-LAST:event_DeleteActionPerformed

    private void tabelUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelUserMouseClicked
        if(isDelete == true){
            int selectedRow = tabelUser.getSelectedRow();
            String selectedID = (String) tabelUser.getValueAt(selectedRow, 0);
            String sql = "SELECT id FROM member WHERE idtelegram =?";
            try (PreparedStatement statement = con.prepareStatement(sql)) {
                statement.setString(1, selectedID); 
                ResultSet resultSet = statement.executeQuery(); 
                if (resultSet.next()) {
                    IDUser = resultSet.getInt("id");
            }
            } catch (SQLException ex) {
                Logger.getLogger(adminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            int result = JOptionPane.showConfirmDialog(adminPage.this, "Apakah Anda yakin ingin menghapus user?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    kon.deleteUserWithID(IDUser);
                    JOptionPane.showMessageDialog(adminPage.this, "User Berhasil Dihapus",
                            "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    fieldblank();
                    
                    offfield();
                }else{
                        
                }
            isDelete = false;
        }
    }//GEN-LAST:event_tabelUserMouseClicked

    private void SendBroadcastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendBroadcastActionPerformed
        Chatbot bot = new Chatbot();
        String broadcast = BroadcastField.getText();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        if (broadcast.isEmpty()) {
            JOptionPane.showMessageDialog(adminPage.this, "Siaran tidak boleh kosong",
                    "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }else{
            JOptionPane.showMessageDialog(adminPage.this, "Broadcast berhasil dikirim",
                    "Sukses", JOptionPane.INFORMATION_MESSAGE);
            bot.sendBroadcastMessage(broadcast);
        }
        
        BroadcastField.setText("");
    }//GEN-LAST:event_SendBroadcastActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        if(searchField.getText().isEmpty()){
            isSearch = false;
        }else{
            isSearch = true;
        }
        
    }//GEN-LAST:event_searchFieldKeyReleased
     private boolean isCommandExists(Connection connection, String command) {
        try {
            String sql = "SELECT COUNT(*) FROM cmdres WHERE command=?";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, command);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        return count > 0;
                    }
                }
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new adminPage().setVisible(true);
                } catch (TelegramApiException ex) {
                    Logger.getLogger(adminPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    private void startDataUpdateTimer() {
        int delay = 1000; // Delay in milliseconds (adjust as needed)
        ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                baca_data();
                baca_data_user();
                baca_history();
            }
        };
        new Timer(delay, taskPerformer).start();
    }
    private void baca_data() 
    { 
        try{ 
            stm = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE); 
            rscmd = stm.executeQuery("select * from cmdres"); 

            ResultSetMetaData meta = rscmd.getMetaData(); 
            int col = meta.getColumnCount(); 
            int baris = 0; 
            while(rscmd.next()) { 
               baris = rscmd.getRow(); 
            } 

     dataTable = new Object[baris][col]; 
     int x = 0; 
     rscmd.beforeFirst(); 
     while(rscmd.next()) {  
        dataTable[x][0] = rscmd.getString("command"); 
        dataTable[x][1] = rscmd.getString("response"); 
        x++; 
     } 
     tabelrespon.setModel(new DefaultTableModel(dataTable,header)); 
     } 
     catch(SQLException e) 
     { 
        JOptionPane.showMessageDialog(null, e); 
     } 
    }
    private void baca_data_user() 
    { 
        try{ 
            stm2 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE); 
            user = stm2.executeQuery("select * from member"); 

            ResultSetMetaData meta = user.getMetaData(); 
            int col = meta.getColumnCount(); 
            int baris = 0; 
            while(user.next()) { 
               baris = user.getRow(); 
            } 

     dataTableUser = new Object[baris][col]; 
     int x = 0; 
     user.beforeFirst(); 
     while(user.next()) {  
        dataTableUser[x][0] = user.getString("idtelegram"); 
        dataTableUser[x][1] = user.getString("usernametelegram"); 
        x++; 
     } 
     tabelUser.setModel(new DefaultTableModel(dataTableUser,headerUser)); 
     } 
     catch(SQLException e) 
     { 
        JOptionPane.showMessageDialog(null, e); 
     } 
    }
    
    private void baca_history() {
        try{
            DefaultListModel<String> listModel = new DefaultListModel<>();
            stm = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            if(!isSearch){
                RsLog = stm.executeQuery("select * from logchat");
            }else{ 
                String query = "SELECT * FROM logchat WHERE username LIKE '%" + searchField.getText() + "%' OR message LIKE '%" + searchField.getText() + "%'";
                RsLog = stm.executeQuery(query);
            }
            

            int x = 0;
            RsLog.beforeFirst();
            while(RsLog.next()) {

                String Name = "";
                if(RsLog.getString("status").equals("masuk")){
                    Name = RsLog.getString("username");
                }   
                else{
                    Name = "Naswa Bot";
                }
                listModel.addElement("[ "+RsLog.getString("timestamp")+" ] "+Name+" : "+RsLog.getString("message"));
                x++;
            }
                ListPesan.setModel(listModel);     
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BroadcastField;
    private javax.swing.JButton Delete;
    private javax.swing.JList<String> ListPesan;
    private javax.swing.JButton SendBroadcast;
    private javax.swing.JButton addCommand;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField commandField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField responseField;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton start;
    private javax.swing.JTable tabelUser;
    private javax.swing.JTable tabelrespon;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
